# We need a specific parser for the structured logging that is written by the Rust logging framework (tracing).
# We need to specify the name of the field that should be used as timestamp of the document and the format
# of that timestamp.
[PARSER]
    Name        rust_tracing_json
    Format      json
    Time_Key    timestamp
    Time_Format %Y-%m-%dT%H:%M:%S.%LZ

# To get proper fields from the Nginx logging, we use a (complex) regular expression to parse each log line.
# The names between ?< and > will become the name of the corresponding field.
[PARSER]
    Name        nginx_access_json
    Format      json
    Time_Key    time_local
    Time_Format %d/%b/%Y:%H:%M:%S %z

# Since we still need to split the 'request' field into method, path and protocol, we need an extra
# parser just for the request field.
[PARSER]
    Name   nginx_request_parser
    Format regex
    Regex  (?<method>[A-Z]+) (?<path>[^ ]+) (?<protocol>[^ ]+)

# To parse Nginx errors, we need a different regular expression, but we're trying to keep as much field
# names the same.
[PARSER]
    Name        nginx_error
    Format      regex
    Regex       ^(?<time>[^\s]+ [^\s]+) \[(?<level>[^\]]+)\] (?<pid>\d+)#(?<worker_id>\d+): \*(?<connection_id>\d+) (?<message>[^,]+), client: (?<client>[^\s,]+), server: (?<server>[^\s,]+), request: "(?<http_method>[A-Z]+) (?<path>[^\s]+) (?<protocol>[^\"]+)", upstream: "(?<upstream>[^\"]+)", host: "(?<host>[^\"]+)", referrer: "(?<referrer>[^\"]+)"$
    Time_Key    time
    Time_Format %Y/%m/%d %H:%M:%S
